#!/bin/bash

# epics-configure-iptavbles : an iptables configuration for EPICS
#
# Copyright 2025 Helmholtz-Zentrum Berlin für Materialien und Energie GmbH
# <https://www.helmholtz-berlin.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

################################################################################
# Version: 1.2
#
# Author: R. Ovsyannikov, ovsyannikov@helmholtz-berlin.de
# Minor modifications by Ben Franksen 2020 for the softIOC project
# Further changes by Goetz Pfeiffer <Goetz.Pfeiffer@helmholtz-berlin.de> 2023, 2025
#
#
################################################################################

me=$(basename "$0")

if echo "$*" | grep -q '\(^\| \)\(-h\|--help\)'; then
    echo "$me - set up iptables for the EPICS."
    echo 
    echo "This will two things:"
    echo
    echo " 1.  Convert all UDP unicasts to a given port to UDP broadcasts."
    echo " 2.  Filter all broadcasts except those sent to the broadcast-address "
    echo "     of the interface or 255.255.255.255."
    echo
    echo "IMPORTANT:"
    echo
    echo "In case of update or changing port settings - please first stop using"
    echo "last used version of the script and port number so old rules are removed"
    echo "properly before starting again."
    echo
    echo "usage:"
    echo "$me COMMAND PORT [INTERFACE [INTERFACE ...]] [OPTIONS]"
    echo
    echo "OPTIONS:"
    echo "  -h --help: this help"
    echo
    echo "Known COMMANDs:"
    echo "    start  - setup iptables rules"
    echo "    stop   - setup iptables rules"
    echo "    dryrun - show what 'start´ would do"
    echo
    echo "If INTERFACE is not given, all network interfaces will be used."
    echo
    exit 0
fi

# Handle arguments
COMMAND="$1"
shift
if [ -z "$COMMAND" ]; then
    echo "Error, COMMAND is missing, enter '$me -h' for help." >&2
    exit 1
fi
if [ "$COMMAND" == "start" ]; then
    ACTIONFLAG=-A
    CMD="iptables"
elif [ "$COMMAND" == "stop" ]; then
    ACTIONFLAG=-D
    CMD="iptables"
elif [ "$COMMAND" == "dryrun" ]; then
    # no action specified or unknown action: dry run
    ACTIONFLAG=-A
    CMD="echo iptables"
else
    echo "Error, unknown COMMAND '$COMMAND', enter '$me -h' for help." >&2
    exit 1
fi

PORT="$1"
shift
if [ -z "$PORT" ]; then
    echo "Error, PORT is missing, enter '$me -h' for help." >&2
    exit 1
fi
if ! echo "$PORT" | grep -q '^[0-9]\+$'; then
    echo "Error, PORT '$PORT' is not a number", enter '$me -h' for help. >&2
    exit 1
fi

IFACES="$*"

################################################################################
# Check if all needed utils/commands are available
for cmd in cut grep ip sed iptables; do
    if [ -z "$(which $cmd)" ]; then
        echo "Error, can not find mandatory program '$cmd' in PATH=$PATH" >&2
        exit 1
    fi
done

################################################################################
# detect all configured local interfaces
if [ -z "$IFACES" ]; then
    IFACES=$(ip -4 addr | grep '^[^ ]' | sed -e 's/^[^ ]\+ \+//;s/: .*//;s/@.*//')
fi

for iface in $IFACES; do
    if [ "$iface" == "lo" ]; then
        continue
    fi
    echo "Processing interface $iface" >&2

    # ADDRSPEC is a list of:
    # IP-ADDR1,BROADCAST1
    # IP-ADDR2,BROADCAST2
    #  ...
    # For many interfaces there is only one ip and broadcast address
    ADDRSPEC=$(ip -o -4 addr show "$iface" 2>/dev/null | sed -e 's#^.*inet *\([0-9\.]\+\)/[0-9]\+ *brd *\([0-9\.]\+\).*#\1,\2#')
    if [ -z "$ADDRSPEC" ]; then
        echo "  Warning: $iface does not exist or is not configured, skipping this interface." >&2
        continue
    fi

    ################################################################################
    # Configure iptables

    # Convert udp unicasts to port $PORT into local broadcasts
    for spec in $ADDRSPEC; do
        addr=$(echo "$spec" | cut -d ',' -f 1)
        # BCASTS may be a list of several broadcast addresses:
        bcast=$(echo "$spec" | cut -d ',' -f 2)
        $CMD -t nat $ACTIONFLAG PREROUTING -i $iface -d $addr -p udp -m udp --dport $PORT -j DNAT --to-destination $bcast
    done

    # Filter out udp broadcasts to port $PORT except $ALLOWED_BCASTS
    # BCASTS may be a list of several broadcast addresses:
    BCASTS=$(echo "$ADDRSPEC" | sed -e 's/[^ ]\+,//g')
    ALLOWED_BCASTS="$BCASTS 255.255.255.255"
    for bcast in $ALLOWED_BCASTS; do
        $CMD $ACTIONFLAG INPUT -i $iface -p udp -m pkttype --pkt-type broadcast -d ${bcast}/32 --dport $PORT -j ACCEPT
    done
    $CMD $ACTIONFLAG INPUT -i $iface -p udp -m pkttype --pkt-type broadcast --dport $PORT -j DROP
done
